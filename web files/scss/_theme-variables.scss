@import "mixins";

/** ===========================================
    # Theme Type Settings
============================================ */
$font-family: "Arial", "Helvetica Neue", "Helvetica", "Roboto", sans-serif;
$primary-font: "proxima-nova", "Helvetica Neue", "Helvetica", "Roboto", "Arial", sans-serif;
$fa-font: 'Font Awesome 5 Free';
$font-size: $font-size-base;

$body-color: theme-color("black");
$heading-color: theme-color("black");

/** ===========================================
    # Theme Color Pallette
  ============================================ */
$theme-colors: (
  "primary": #d60e96,
  "primary-light": lighten(#d60e96, 10%),
  "primary-dark": darken(#d60e96, 10%),
  "secondary": #3d5d6f,
  "secondary-light": lighten(#3d5d6f, 10%),
  "secondary-dark": darken(#3d5d6f, 10%),
  "light-gray": #fafafa,
  "light-gray-dark": darken(#fafafa, 10%),
  "eerie-black": #1b1b1b,
  "black": $black,
  "white": $white,
  "yellow": #ff9b27,
  "orange": #ff8d02,
  "orange-dark": #ff7b49,
  "watermelon": #ff6177,
  "rose": #ff48a4,
  "alpha2": rgba($black, .2),
  "alpha4": rgba($black, .4),
  "alpha6": rgba($black, .6),
  "alpha8": rgba($black, .8),
  "alpha2-white": rgba($white, .2),
  "alpha4-white": rgba($white, .4),
  "alpha6-white": rgba($white, .6),
  "alpha8-white": rgba($white, .8),
);

/** ===========================================
    # Theme Text and BG Hover Styles
============================================ */
@each $color, $value in $theme-colors {
  
  // Generate `.bg-*` color utilities
  @include bg-variant('.bg-#{$color}', $value);
  
  // Generate `.bg-hover*` color utilities
  .bg-hover-#{$color} {
    &:hover {
      background-color: #{$value} !important;
    }
  }

  // Generate `.text-*` color utilities
  @include text-emphasis-variant(".text-#{$color}", $value);
  
  .text-hover-#{$color} {
    &:hover {
      color: #{$value} !important;
    }
  }

  // Generate `.btn-*` color utilities
  .btn-#{$color} {
    @include button-variant($value, $value);
  }

  // Generate `.btn-*` color utilities
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }

}

$spacer: 1rem !default;
$spacers: (
  0: 0,
  1: ($spacer * .25),
  2: ($spacer * .5),
  3: $spacer,
  4: ($spacer * 1.5),
  5: ($spacer * 3),
  6: ($spacer * 3.5)
) !default;

// Height and Width Classes
// This variable affects the `.h-*` and `.w-*` classes.
// Iterate for what you need.
$sizes: () !default;
@for $i from 1 through 1000 {
  @if $i <= 100 {
    @if $i%5 == 0 {
      $holdingArrayPercent: (
        // Escape the Percentage Sign
        '#{$i}': #{$i}#{'%'}
      );
      $sizes: map-merge($sizes, $holdingArrayPercent);
      $holdingArrayPixels: (
      '#{$i}p': #{$i}px
      );
      $sizes: map-merge($sizes, $holdingArrayPixels);
    }
  }
  @if $i%25 == 0 {
    $holdingArrayPixels: (
      '#{$i}p': #{$i}px
    );
    $sizes: map-merge($sizes, $holdingArrayPixels);
  }
}

//Loop through each breakpoint and provide classes for the sizes within the sizes map from previous loop

@each $breakpoint-key, $breakpoint in $grid-breakpoints {
  @media (min-width: #{$breakpoint}) {
    @each $prop, $abbrev in (width: w-#{$breakpoint-key}, height: h-#{$breakpoint-key}) {
      @each $size, $length in $sizes {
         html .#{$abbrev}-#{$size} { #{$prop}: #{$length} !important;}
      }
    }
  }
}